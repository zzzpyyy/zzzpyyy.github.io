<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on golang study</title>
    <link>https://zzzpyyy.github.io/posts/</link>
    <description>Recent content in Posts on golang study</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 14 Jun 2024 16:36:12 +0800</lastBuildDate><atom:link href="https://zzzpyyy.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>字节面试题</title>
      <link>https://zzzpyyy.github.io/posts/%E5%AD%97%E8%8A%82%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 12 Jun 2024 12:49:37 +0800</pubDate>
      
      <guid>https://zzzpyyy.github.io/posts/%E5%AD%97%E8%8A%82%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      
      <description>Golang 1. new和make的区别 两个关键字都可以初始化 make：主要用于slice、map、channel的初始化 new：根据传入的类型分配一片内存空间并返回指向这片内存空间的指针
slice := make([]int, 0, 100) hash := make(map[int]bool, 10) ch := make(chan int, 5) slice 是一个包含 data、cap 和 len 的结构体 reflect.SliceHeader； hash 是一个指向 runtime.hmap 结构体的指针； ch 是一个指向 runtime.hchan 结构体的指针
2. 函数传值和传指针的区别 传值： 将参数值复制一份传递给函数，函数内部对参数修改不会影响到原来的变量 传指针： 将参数的地址传递给函数，函数内部对参数修改会影响到原来的变量 区别： 性能可以提升，大型数据结构避免复制，数据拷贝，减少了内存使用，提高性能，但是会修改原有banal，在某些情况下安全性较低，可能会导致意外的副作用</description>
      
    </item>
    
    <item>
      <title>hello world</title>
      <link>https://zzzpyyy.github.io/posts/my-first-post/</link>
      <pubDate>Wed, 12 Jun 2024 12:43:51 +0800</pubDate>
      
      <guid>https://zzzpyyy.github.io/posts/my-first-post/</guid>
      
      <description>本大爷来测试一下 </description>
      
    </item>
    
  </channel>
</rss>
